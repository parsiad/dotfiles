export CRYPTOGRAPHY_OPENSSL_NO_LEGACY=1
export EDITOR=nvim
export PATH="$PATH:/opt/miniconda3/bin:$HOME/bin"

# Edit command in Vi by pressing \\
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd \\ edit-command-line

# Vi mode
bindkey -v
export KEYTIMEOUT=1

# Do not select pasted text (https://unix.stackexchange.com/questions/331850/zsh-selects-a-pasted-text)
zle_highlight=('paste:none')

# Set prompt string
setopt PROMPT_SUBST
HOSTNAME=$(command -v hostname &>/dev/null && hostname -s || echo "?")
git_super_status() {
  [[ $(git rev-parse --is-inside-work-tree 2>/dev/null) != true ]] && return
  [[ -f "$(git rev-parse --show-toplevel 2>/dev/null)/.disable-git-prompt" ]] && return
  echo " %F{5}$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --exact-match 2>/dev/null)"
}
PROMPT='%F{3}$HOSTNAME%F{4} %F{2}$(sed "s:\([^/]\)[^/]*/:\1/:g" <<<"$PWD")$(git_super_status)%F{4}> %f'

# Change behavior of Home, End, etc. keys (https://zshwiki.org/home/keybindings/)
typeset -g -A key
key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[ShiftTab]="${terminfo[kcbt]}"
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"      beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"       end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"    overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}" backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"    delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"        up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"      down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"      backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"     forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"    beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"  end-of-buffer-or-history
[[ -n "${key[ShiftTab]}"  ]] && bindkey -- "${key[ShiftTab]}"  reverse-menu-complete
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
  autoload -Uz add-zle-hook-widget
  function zle_application_mode_start {
    echoti smkx
  }
  function zle_application_mode_stop {
    echoti rmkx
  }
  add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
  add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Tab completion
autoload -U compinit
compinit
zmodload -i zsh/complist
zstyle ':completion:*' menu select

# History
setopt share_history
HISTSIZE=999999999
SAVEHIST=$HISTSIZE
HISTFILE=~/.zsh_history

# fzf
[[ $- == *i* ]] && source "$HOME/.fzf/shell/completion.zsh" 2> /dev/null
source "$HOME/.fzf/shell/key-bindings.zsh"

eval "$(direnv hook zsh)"

eval "$(zoxide init zsh)"

# Lazy-load Conda hook on first use
conda() {
    unset -f conda
    eval "$('/opt/miniconda3/bin/conda' 'shell.zsh' 'hook')"
    conda "$@"
}

#  █████  ██      ██  █████  ███████ ███████ ███████ 
# ██   ██ ██      ██ ██   ██ ██      ██      ██      
# ███████ ██      ██ ███████ ███████ █████   ███████ 
# ██   ██ ██      ██ ██   ██      ██ ██           ██ 
# ██   ██ ███████ ██ ██   ██ ███████ ███████ ███████

command -v batcat &> /dev/null && alias bat=batcat
command -v btop &> /dev/null && alias top=btop
command -v colordiff &> /dev/null && alias diff=colordiff
command -v exa &> /dev/null && alias ls='exa -H -g' || alias ls='ls --color=auto'
command -v nvim &> /dev/null && { alias vim=nvim; export MANPAGER='nvim +Man!'; }

alias decrypt-id_rsa='gpg --decrypt ~/.password-store/keys/id_rsa.gpg | ssh-add -t 60 -'
alias g=git
alias git-authors='git shortlog --email --summary --numbered'
alias git-sha='git rev-parse --short HEAD'
alias git-tips='git branch | cut -c 2- | while read line; do git log --color --format="%h %C(green)%ci %C(magenta)%<(20)%cr %C(blue)%<(20)%an %C(cyan)$line %C(reset)[%s] %C(reset)" $line | head -n 1; done | sort -r'
alias l='ls -l'
alias la='ls -la'
alias ll=l
alias pacman-age='head -n1 /var/log/pacman.log | cut -d'\'' '\'' -f1 | cut -c 2-'
alias pacman-ls-by-size='pacman -Qi | awk '\''/^Name/ {name=$3} /^Installed Size/ {size=$4; size_hint=$5;printf "%4.0f%-3s    %s\n", size, size_hint, name}'\'' | sort -h -r'
alias pacman-rm-orphans='sudo pacman -Rns $(pacman -Qtdq)'
alias path='tr '\'':'\'' '\''\n'\'' <<< $PATH'
alias services='systemctl list-unit-files --type=service'
alias ssh='decrypt-id_rsa && ssh'
alias sftp='decrypt-id_rsa && sftp'
alias vi=vim

bin2dec() { echo "ibase=2 ;           $1" | bc -l }
bin2hex() { echo "ibase=2 ; obase=16; $1" | bc -l }
dec2bin() { echo "          obase=2 ; $1" | bc -l }
dec2hex() { echo "          obase=16; $1" | bc -l }
hex2bin() { echo "ibase=16; obase=2 ; $1" | bc -l }
hex2dec() { echo "ibase=16;           $1" | bc -l }
json-diff() { diff <(jq -S . "$1") <(jq -S . "$2") }
md5sum-dir() { find $1 -type f -exec md5sum {} \; | sort -k 2 | md5sum }
